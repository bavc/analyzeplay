#!/bin/bash
[ ! $(which ffplay) ] && { echo ffplay is necessary to run this. Maybe you can install it with: 'brew install --with-ffplay --with-freetext ffmpeg'; exit 1 ;};

usage(){
    echo "
    $(basename $0)

    usage: $(basename $0) [ filteroption ] [ -o outputfile ] inputfile

    use - (hyphen) for the input if it is a pipe (for instace: bmdcapture -v -F nut -c 2 -s 16 -p 8 -m 0 -f pipe:1 | analyzeplay -c -)

    filter options:
    -f        split field mode
    -d        field difference mode. midtone gray means no difference in between fields
    -H        field histogram mode, histograms per field
    -b        bit slice playback per field, enter 1 through 8 to show that bit value (only supports the most significant 8 bits)
    -A        field waveform mode with highlights for broadcast range (draft #2)
    -E        highlight pixels that are outside of broadcast range
    -J        vectorscope mode (draft #2)
    -N        highlight pixels that are labelled as temporal outliers
    -P
    -Q
    -R
    -V
    optional output:
    -o        outputfile
    -h
    "
}

# filter recipes
fieldsplitplay(){
    # Name: Field Split
    filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];[a1][b1]framepack=tab'"
}

fielddiffplay(){
    # Name: Field Difference
    # arg1: plane, select of (all, y, u, or v), default=all, radio buttons or toggles, something compact
    # arg2: strength, range=0..1, default=0.2, slider
    # arg3: intensity, range=0..1, default=0.2, slider
    if [ "$1" = "all" ] ; then
        filter="split[a][b];[a]field=bottom[a1];[b]field=top,negate[b2];[a1][b2]blend=all_mode=average,histeq=strength=$2:intensity=$3"
    else
        filter="extractplanes=$1,split[a][b];[a]field=bottom[a1];[b]field=top,negate[b2];[a1][b2]blend=all_mode=average,histeq=strength=$2:intensity=$3"
    fi
}

framemetadataplay(){
    # i may add an option to switch between multiple template txt files, but for now just one.
    filter="cropdetect=reset=1:limit=16:round=1,signalstats=stat=brng+vrep+tout,drawtext=fontfile=Anonymous_Pro_B.ttf:x=8:y=8:fontcolor=yellow:shadowx=3:shadowy=2:fontsize=20:tabsize=8:textfile=drawtext.txt"
}

waveletnoise(){
    # skip
    filter="split[a][b],[a]owdenoise[a1],[b]negate[b1],[a1][b1]blend=all_mode=average,histeq"
}

dctnoise(){
    # skip
    filter="split[a][b],[a]dctdnoiz[a1],[b]negate[b1],[a1][b1]blend=all_mode=average,histeq"
}

deshakediff(){
    # skip
    filter="split[a][b],[a]deshake=edge=2[a1],[b]negate[b1],[a1][b1]blend=all_mode=average,histeq"
}

horizoffset(){
    #skip
    filter="split[a][b];[a]crop=iw/2:ih:iw/2:0,setpts=PTS-STARTPTS[a1];[b]crop=iw/2:ih:0:0,setpts=PTS+10/TB[b1];[a1][b1]framepack"
}

histogram(){
    # Name: Histogram
    # Description: A histogram display for each channel of the input video (typically either in YUV or RBG).
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: rgb, boolean, default=N, toggle
    if [ "$1" = "N" -a "$2" = "N" ] ; then
        filter="histogram'"
    elif [ "$1" = "Y" -a "$2" = "N" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];[a1]histogram[a2];[b1]histogram[b2];[a2][b2]framepack"
    elif [ "$1" = "N" -a "$2" = "Y" ] ; then
        filter="format=rgb48,histogram"
    elif [ "$1" = "Y" -a "$2" = "Y" ] ; then
        filter="format=rgb48,split[a][b];[a]field=top[a1];[b]field=bottom[b1];[a1]histogram[a2];[b1]histogram[b2];[a2][b2]framepack"
    fi
}

waveform(){
    # Name: Waveform
    # Description: A waveform display. Guide lines are drawn at 7.5 IRE (0x16) and 100 IRE (0xEB). The area above 100 IRE is tinted in crimson and below 7.5 IRE is tinted aqua. These ranges, above 100 IRE and below 7.5 IRE, show luminosity values outside of broadcast range.
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: scale, range=1..255, default=20, slider
    # arg3: parade, boolean, default=N, toggle
    # arg4: horizontal, boolean, default=N, toggle
    [[ "${2}" -ge 1 && "${2}" -le 255 ]] || { echo The scale value must be between 1 and 255 ; exit 1 ;};
    
    if [ "$1" = "N" -a "$3" = "N" -a "$4" = "N" ] ; then
        filter="histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        setdar=4/3"
    elif [ "$1" = "N" -a "$3" = "Y" -a "$4" = "N" ] ; then
        filter="histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5"
    elif [ "$1" = "Y" -a "$3" = "N" -a "$4" = "N" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];\
        [a1]histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[a2];\
        [b1]histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[b2];\
        [a2][b2]framepack=tab"
    elif [ "$1" = "Y" -a "$3" = "Y" -a "$4" = "N" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];\
        [a1]histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5[a2];\
        [b1]histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5[b2];\
        [a2][b2]framepack"
    elif [ "$1" = "N" -a "$3" = "N" -a "$4" = "Y" ] ; then
        filter="transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        setdar=4/3"
    elif [ "$1" = "N" -a "$3" = "Y" -a "$4" = "Y" ] ; then
        filter="transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5"
    elif [ "$1" = "Y" -a "$3" = "N" -a "$4" = "Y" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];\
        [a1]transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[a2];\
        [b1]transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[b2];\
        [a2][b2]framepack=tab"
    elif [ "$1" = "Y" -a "$3" = "Y" -a "$4" = "Y" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];\
        [a1]transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5[a2];\
        [b1]transpose=1,histogram=step=$2:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16,\
        drawgrid=width=0:height=256:thickness=1:color=white@0.5[b2];\
        [a2][b2]framepack"
    fi
}

vectorscope(){
    # Name: Vectorscope
    # Description: A vectorscope display. This display plots chroma values (U/V color placement) in two dimensional graph (which is called a vectorscope). It can be used to read of the hue and saturation of the current frame. The whiter a pixel in the vectorscope, the more pixels of the input frame correspond to that pixel (that is the more pixels have this chroma value). The V component is displayed on the vertical (Y) axis, with the bottom edge being V = 0 and the top being V = 255. The U component is displayed on the horizontal (Y) axis, with the left representing U = 0 and the right representing U = 255.
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: scale, range=1..10, default=1, slider
    [[ $1 -ge -1 && $1 -le 10 ]] || { echo The scale value must be between 1 and 10 ; exit 1 ;};
    if [ "$1" = "N" ] ; then
        filter="histogram=mode=color2,lutyuv=y=val*$2,\
        transpose=dir=2,\
        scale=512:512,\
        drawgrid=w=32:h=32:t=1:c=white@0.1,\
        drawgrid=w=256:h=256:t=1:c=white@0.2,\
        drawbox=w=9:h=9:t=1:x=180-3:y=512-480-5:c=red@0.6,\
        drawbox=w=9:h=9:t=1:x=108-3:y=512-68-5:c=green@0.6,\
        drawbox=w=9:h=9:t=1:x=480-3:y=512-220-5:c=blue@0.6,\
        drawbox=w=9:h=9:t=1:x=332-3:y=512-32-5:c=cyan@0.6,\
        drawbox=w=9:h=9:t=1:x=404-3:y=512-444-5:c=magenta@0.6,\
        drawbox=w=9:h=9:t=1:x=32-3:y=512-292-5:c=yellow@0.6,\
        drawbox=w=9:h=9:t=1:x=199-3:y=512-424-5:c=red@0.8,\
        drawbox=w=9:h=9:t=1:x=145-3:y=512-115-5:c=green@0.8,\
        drawbox=w=9:h=9:t=1:x=424-3:y=512-229-5:c=blue@0.8,\
        drawbox=w=9:h=9:t=1:x=313-3:y=512-88-5:c=cyan@0.8,\
        drawbox=w=9:h=9:t=1:x=367-3:y=512-397-5:c=magenta@0.8,\
        drawbox=w=9:h=9:t=1:x=88-3:y=512-283-5:c=yellow@0.8,\
        drawbox=w=9:h=9:t=1:x=128-3:y=512-452-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=160-3:y=512-404-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=192-3:y=512-354-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=224-3:y=512-304-5:c=sienna@0.8"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];[a]field=top[a1];[b]field=bottom[b1];\
        [a1]histogram=mode=color2,lutyuv=y=val*$2,\
        transpose=dir=2,\
        scale=512:512,\
        drawgrid=w=32:h=32:t=1:c=white@0.1,\
        drawgrid=w=256:h=256:t=1:c=white@0.2,\
        drawbox=w=9:h=9:t=1:x=180-3:y=512-480-5:c=red@0.6,\
        drawbox=w=9:h=9:t=1:x=108-3:y=512-68-5:c=green@0.6,\
        drawbox=w=9:h=9:t=1:x=480-3:y=512-220-5:c=blue@0.6,\
        drawbox=w=9:h=9:t=1:x=332-3:y=512-32-5:c=cyan@0.6,\
        drawbox=w=9:h=9:t=1:x=404-3:y=512-444-5:c=magenta@0.6,\
        drawbox=w=9:h=9:t=1:x=32-3:y=512-292-5:c=yellow@0.6,\
        drawbox=w=9:h=9:t=1:x=199-3:y=512-424-5:c=red@0.8,\
        drawbox=w=9:h=9:t=1:x=145-3:y=512-115-5:c=green@0.8,\
        drawbox=w=9:h=9:t=1:x=424-3:y=512-229-5:c=blue@0.8,\
        drawbox=w=9:h=9:t=1:x=313-3:y=512-88-5:c=cyan@0.8,\
        drawbox=w=9:h=9:t=1:x=367-3:y=512-397-5:c=magenta@0.8,\
        drawbox=w=9:h=9:t=1:x=88-3:y=512-283-5:c=yellow@0.8,\
        drawbox=w=9:h=9:t=1:x=128-3:y=512-452-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=160-3:y=512-404-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=192-3:y=512-354-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=224-3:y=512-304-5:c=sienna@0.8[a2];\
        [b1]histogram=mode=color2,lutyuv=y=val*$2,\
        transpose=dir=2,\
        scale=512:512,\
        drawgrid=w=32:h=32:t=1:c=white@0.1,\
        drawgrid=w=256:h=256:t=1:c=white@0.2,\
        drawbox=w=9:h=9:t=1:x=180-3:y=512-480-5:c=red@0.6,\
        drawbox=w=9:h=9:t=1:x=108-3:y=512-68-5:c=green@0.6,\
        drawbox=w=9:h=9:t=1:x=480-3:y=512-220-5:c=blue@0.6,\
        drawbox=w=9:h=9:t=1:x=332-3:y=512-32-5:c=cyan@0.6,\
        drawbox=w=9:h=9:t=1:x=404-3:y=512-444-5:c=magenta@0.6,\
        drawbox=w=9:h=9:t=1:x=32-3:y=512-292-5:c=yellow@0.6,\
        drawbox=w=9:h=9:t=1:x=199-3:y=512-424-5:c=red@0.8,\
        drawbox=w=9:h=9:t=1:x=145-3:y=512-115-5:c=green@0.8,\
        drawbox=w=9:h=9:t=1:x=424-3:y=512-229-5:c=blue@0.8,\
        drawbox=w=9:h=9:t=1:x=313-3:y=512-88-5:c=cyan@0.8,\
        drawbox=w=9:h=9:t=1:x=367-3:y=512-397-5:c=magenta@0.8,\
        drawbox=w=9:h=9:t=1:x=88-3:y=512-283-5:c=yellow@0.8,\
        drawbox=w=9:h=9:t=1:x=128-3:y=512-452-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=160-3:y=512-404-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=192-3:y=512-354-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=224-3:y=512-304-5:c=sienna@0.8[b2];\
        [a2][b2]framepack=tab"
    fi
}

extract_plane_uv(){
    # arg1: fieldsplit, boolean, default=N, toggle
    if [ "$1" = "N" ] ; then
        filter="extractplanes=u+v,framepack'"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]extractplanes=u+v,framepack[a2];\
        [b1]extractplanes=u+v,framepack[b2];\
        [a2][b2]framepack=tab"
    fi
}

extract_plane_uv_eq(){
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: strength, range=0..1, default=0.2, slider
    # arg3: intensity, range=0..1, default=0.2, slider
    [[ $2 =~ ^[0-1]+(\.[0-9]+)?$ ]] || { echo The strength value must be between 0 and 1 ; exit 1 ;};
    [[ $3 =~ ^[0-1]+(\.[0-9]+)?$ ]] || { echo The intensity value must be between 0 and 1 ; exit 1 ;};
    if [ "$1" = "N" ] ; then
        filter="extractplanes=u+v,framepack,histeq=strength=$2:intensity=$3"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]extractplanes=u+v,framepack,histeq=strength=$2:intensity=$3[a2];\
        [b1]extractplanes=u+v,framepack,histeq=strength=$2:intensity=$3[b2];\
        [a2][b2]framepack=tab"
    fi
}

extract_plane(){
    # Name: Extract Plane
    # Description: This filter extracts a video plane which represents the luma or part of the chroma data from the video.
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: plane, select of (y, u, or v), default=v, radio buttons
    [[ $(echo $2 | grep "[yuv]") ]] || { echo The plane value must be set to y, u, or v ; exit 1 ;};
    if [ "$1" = "N" ] ; then
        filter="format=yuv444p,extractplanes=$2"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]format=yuv444p,extractplanes=$2[a2];\
        [b1]format=yuv444p,extractplanes=$2[b2];\
        [a2][b2]framepack=tab"
    fi
}

extract_plane_eq(){
    # Name: Extract Plane - Equalized
    # Description: This filter extracts a video plane which represents the luma or part of the chroma data from the video and then applies a histogram equalization which redistributes the pixel intensities to equalize their distribution across the intensity range. This filter is useful for analyzing compressed video channel signals.
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: plane, select of (y, u, or v), default=v, radio buttons
    # arg3: strength, range=0..1, default=0.2, slider
    # arg4: intensity, range=0..1, default=0.2, slider
    [[ $(echo $2 | grep "[yuv]") ]] || { echo The plane value must be set to y, u, or v ; exit 1 ;};
    [[ $3 =~ ^[0-1]+(\.[0-9]+)?$ ]] || { echo The strength value must be between 0 and 1 ; exit 1 ;};
    [[ $4 =~ ^[0-1]+(\.[0-9]+)?$ ]] || { echo The intensity value must be between 0 and 1 ; exit 1 ;};
    if [ "$1" = "N" ] ; then
        filter="format=yuv444p,extractplanes=$2,histeq=strength=$3:intensity=$4"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]format=yuv444p,extractplanes=$2,histeq=strength=$3:intensity=$4[a2];\
        [b1]format=yuv444p,extractplanes=$2,histeq=strength=$3:intensity=$4[b2];\
        [a2][b2]framepack=tab"
    fi
}

bitslice(){
    # description: Set the bit position for each plane for display for presentation. Setting -1 means to only send 0x80 for that plane, whereas setting 0 means to send the original plane.
    # arg1: y bit position, range=-1..8, default=1, slider
    # arg2: u bit position, range=-1..8, default=0, slider
    # arg3: v bit position, range=-1..8, default=0, slider
    [[ $1 -ge -1 && $1 -le 8 ]] || { echo The bit value must be between -1 and 8 ; exit 1 ;};
    [[ $2 -ge -1 && $2 -le 8 ]] || { echo The bit value must be between -1 and 8 ; exit 1 ;};
    [[ $3 -ge -1 && $3 -le 8 ]] || { echo The bit value must be between -1 and 8 ; exit 1 ;};
    filter="lutyuv=\
        y=if(eq($1\,-1)\,128\,if(eq($1\,0)\,val\,bitand(val\,pow(2\,8-$1))*pow(2\,$1))):\
        u=if(eq($2\,-1)\,128\,if(eq($2\,0)\,val\,bitand(val\,pow(2\,8-$2))*pow(2\,$2))):\
        v=if(eq($3\,-1)\,128\,if(eq($3\,0)\,val\,bitand(val\,pow(2\,8-$3))*pow(2\,$3)))"
}

valueslice(){
    # skip
    # description: Highlight a select value for each plane.
    # arg1: y value, range=-0..255, default=128, slider
    # arg2: u value, range=-0..255, default=128, slider
    # arg3: v value, range=-0..255, default=128, slider
    [[ $1 -ge 0 && $1 -le 255 ]] || { echo The y value must be between 0 and 255 ; exit 1 ;};
    [[ $2 -ge 0 && $2 -le 255 ]] || { echo The u value must be between 0 and 255 ; exit 1 ;};
    [[ $3 -ge 0 && $3 -le 255 ]] || { echo The v value must be between 0 and 255 ; exit 1 ;};
    filter="lutyuv=\
        y=if(eq(val\,$1)\,255\,val):\
        u=if(eq(val\,$2)\,255\,val):\
        v=if(eq(val\,$3)\,255\,val)"
}

valuehighlight(){
    # name: Value Highlight
    # description: This filter selects a video plane and highlights values with a specified range of minimum value to maximum value. The original image of the plane will be presented in grayscale and values within the range will be highlighted as yellow. For instance to highlight Y values below NTSC broadcast range, set plane to Y, min to 0 and max to 16. The resulting image will highlight Y values below broadcast range in yellow.
    # arg1: plane, select of (y, u, or v), default=v, radio buttons
    # arg2: min, range=-0..255, default=128, slider
    # arg3: max, range=-min..255, default=128, slider
    [[ $(echo $2 | grep "[yuv]") ]] || { echo The plane value must be set to y, u, or v ; exit 1 ;};
    [[ $3 -ge 0 && $2 -le 255 ]] || { echo The y value must be between 0 and 255 ; exit 1 ;};
    [[ $4 -ge 0 && $3 -le 255 ]] || { echo The u value must be between 0 and 255 ; exit 1 ;};
    
    if [ "$1" = "N" ] ; then
        filter="extractplanes=$2,lutrgb=r=if(between(val\,$3\,$4)\,255\,val):g=if(between(val\,$3\,$4)\,255\,val):b=if(between(val\,$3\,$4)\,0\,val)"
    elif [ "$1" = "Y" ] ; then
        filter="extractplanes=$2,split[a][b];[a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]lutrgb=r=if(between(val\,$3\,$4)\,255\,val):g=if(between(val\,$3\,$4)\,255\,val):b=if(between(val\,$3\,$4)\,0\,val)[a2];\
        [b1]lutrgb=r=if(between(val\,$3\,$4)\,255\,val):g=if(between(val\,$3\,$4)\,255\,val):b=if(between(val\,$3\,$4)\,0\,val)[b2];\
        [a2][b2]framepack=tab"
    fi
}

chromaadjust(){
    # name: Chroma Adjust
    # description: Similar to a video processing amplifier (proc amp) the hue and saturation levels can be adjusted. Hue adjustments may be expressed in degrees where 0 is no change and 180 would invert the color. For saturation a value of 1 needs the saturation unchanged, 0 removes all color, and the saturation may be increased up to a maximum of 10.
    # arg1: fieldsplit, boolean, default=N, toggle
    # arg2: hue, range=0..360, default=0, slider
    # arg3: saturation, range=-10..10, default=1, slider
    if [ "$1" = "N" ] ; then
        filter="hue=h=$2:s=$3"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];[a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]hue=h=$2:s=$3[a2];\
        [b1]hue=h=$2:s=$3[b2];\
        [a2][b2]framepack=tab"
    fi
}

rang(){
    # Name: Broadcast Range Pixels
    # Description: All pixels from 0 to 7.5 IRE and 100-110 IRE will be highlighted as white pixels to illuminate what area(s) of the frame and how many pixels are outside of braodcast range
    # arg1: fieldsplit, boolean, default=N, toggle
    if [ "$1" = "N" ] ; then
        filter="signalstats=out=rang"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];[a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]signalstats=out=rang[a2];\
        [b1]signalstats=out=rang[b2];\
        [a2][b2]framepack=tab"
    fi
}

tout(){
    # Name: Temporal Outlier Pixels
    # Description: All pixels labeled as 'temporal outliers' will be highlighted as white pixels to illuminate what area(s) of the frame and how many pixels are temporal outliers
    # arg1: fieldsplit, boolean, default=N, toggle
    if [ "$1" = "N" ] ; then
        filter="signalstats=out=tout"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]signalstats=out=tout[a2];\
        [b1]signalstats=out=tout[b2];\
        [a2][b2]framepack=tab"
    fi
}

vrep(){
    # Name: Veritcal Repetition Pixels
    # arg1: fieldsplit, boolean, default=N, toggle
    if [ "$1" = "N" ] ; then
        filter="signalstats=out=vrep"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]signalstats=out=vrep[a2];\
        [b1]signalstats=out=vrep[b2];\
        [a2][b2]framepack=tab"
    fi
}

head(){
    # skip
    # Name: Head Switch Pixels
    # arg1: fieldsplit, boolean, default=N, toggle
    if [ "$1" = "N" ] ; then
        filter="signalstats=out=head"
    elif [ "$1" = "Y" ] ; then
        filter="split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1];\
        [a1]signalstats=out=head[a2];\
        [b1]signalstats=out=head[b2];\
        [a2][b2]framepack=tab"
    fi
}

# filter recipes
showspectrum(){
    # Name: Field Split
    filter="showspectrum"
}
}


[ "$#" = 0 ] && { usage ; exit 1 ;};
movietype="movie"
while getopts fH:b:c:d:egijkm:nq:A:E:J:L:M:N:P:Q:R:V:o:h opt ; do
    case "$opt" in
        f) fieldsplitplay ;;
        d)  plane=$(echo $OPTARG | cut -d+ -f2)
            plane=$(echo $OPTARG | cut -d+ -f1)
            strength=$(echo $OPTARG | cut -d+ -f2)
            intensity=$(echo $OPTARG | cut -d+ -f3)
            fielddiffplay ${plane:-v} ${strength:-0.2} ${intensity:-0.2} ;;
        H)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            rgb=$(echo $OPTARG | cut -d+ -f2)
            histogram ${fieldsplit:-N} ${rgb:-N}
            ;;
        b)
            [[ $(echo $OPTARG | grep "\-\?[0-8]+-\?[0-8]+-\?[0-8]") ]] || { echo The bits slice expression must be expression in y+u+v format, such as -b 1+2+3 to show the first bit only of the y plane, second bit of the u plane, and third bit of the v plane. Any value may be set to zero to disable bits or set to -1 to pass all bits. ; exit 1 ;};
            bity=$(echo $OPTARG | cut -d+ -f1)
            bitu=$(echo $OPTARG | cut -d+ -f2)
            bitv=$(echo $OPTARG | cut -d+ -f3)
            bitslice $bity $bitu $bitv
            ;;
        c)
            valy=$(echo $OPTARG | cut -d+ -f1)
            valu=$(echo $OPTARG | cut -d+ -f2)
            valv=$(echo $OPTARG | cut -d+ -f3)
            valueslice $valy $valu $valv
            ;;
        q)
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            plane=$(echo $OPTARG | cut -d+ -f2)
            valmin=$(echo $OPTARG | cut -d+ -f3)
            valmax=$(echo $OPTARG | cut -d+ -f4)
            valuehighlight $fieldsplit $plane $valmin $valmax
            ;;
        e)  waveletnoise ;;
        g)  dctnoise ;;
        i)  deshakediff ;;
        j)  horizoffset ;;
        k)  movietype="amovie"
            showspectrum ;;
        m) 
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            hue=$(echo $OPTARG | cut -d+ -f2)
            sat=$(echo $OPTARG | cut -d+ -f3)
            chromaadjust $fieldsplit $hue $sat
            ;;
        n) framemetadataplay ;;
        A)
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            scale=$(echo $OPTARG | cut -d+ -f2)
            parade=$(echo $OPTARG | cut -d+ -f3)
            horizontal=$(echo $OPTARG | cut -d+ -f4)
            waveform ${fieldsplit:-N} ${scale:-20} ${parade:-N} ${horizontal:-V}
            ;;
        E)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            rang ${fieldsplit:-N}
            ;;
        J)
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            scale=$(echo $OPTARG | cut -d+ -f2)
            vectorscope ${fieldsplit:-N} ${scale:-10}
            ;;
        L)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            head ${fieldsplit:-N}
            ;;
        M)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            vrep ${fieldsplit:-N}
            ;;
        N)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            tout ${fieldsplit:-N}
            ;;
        P)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            plane=$(echo $OPTARG | cut -d+ -f2)
            extract_plane ${fieldsplit:-N} ${plane:-v}
            ;;
        Q)  fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            extract_plane_uv ${fieldsplit:-N}
            ;;
        R) 
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            strength=$(echo $OPTARG | cut -d+ -f2)
            intensity=$(echo $OPTARG | cut -d+ -f3)
            extract_plane_uv_eq ${fieldsplit:-N} ${strength:-0.2} ${intensity:-0.2}
            ;;
        V) 
            fieldsplit=$(echo $OPTARG | cut -d+ -f1)
            plane=$(echo $OPTARG | cut -d+ -f2)
            strength=$(echo $OPTARG | cut -d+ -f3)
            intensity=$(echo $OPTARG | cut -d+ -f4)
            extract_plane_eq ${fieldsplit:-N} ${plane:-v} ${strength:-0.2} ${intensity:-0.2}
            ;;
        o) outputfile="$OPTARG" ;;
        h) usage ; exit 1 ;;
        \?) usage ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))
inputfile="$1"
[ ! -f "$inputfile" ] && [ ! "$inputfile" = "-" ] && { echo No input file detected. ; usage ; exit 1 ;};
[ -n "$outputfile" ] && command="ffmpeg -i \"$inputfile\" $filter \"$outputfile\"" || command="ffplay -f lavfi \"${movietype}=$inputfile,$filter\""
echo "Running: $command"
eval "$command"
